
@{
    ViewBag.Title = "Index";
}

<h2>Encryption One Time Pad</h2>
<div class="row well">
    <div class="col-md-6">
        <br />
        <label>Plaintext</label>
        <textarea id="plaintext" class="form-control"></textarea><br />
        <button class="btn btn-primary" id="analyzePlaintext">Analyze Plaintext</button><br /><br />
        <button class="btn btn-primary" id="encrypt">Encrypt</button>
    </div>
    <div class="col-md-6">
        <label>Histogram Plaintext</label>
        <div id="chartPlaintext"></div>
    </div>
</div>

<div class="row">
    <div class="col-md-6"><br /><br /></div>
</div>

<div class="row well">
    <div class="col-md-6">
        <br />
        <label>Ciphertext</label>
        Generate One Time Pad: <span id="keyOneTimePad"></span>
        <textarea id="ciphertext" class="form-control"></textarea><br />
        <button class="btn btn-primary" id="analyzeCiphertext">Analyze Ciphertext</button><br /><br />
        <button class="btn btn-primary" id="decrypt">Decrypt</button> using key
        <input name="backshift" id="decryptkey" value="" type="text" class="form-control" style="width:200px;display:inline-block;" />
    </div>
    <div class="col-md-6">
        <label>Histogram Ciphertext</label>
        <div id="chartCiphertext"></div>
    </div>
</div>

<script>
    //add event listener to the analyseplaintext button
    document.getElementById("analyzePlaintext").addEventListener("click", function (e) {
        e.preventDefault();
        e.stopPropagation();

        //get the value of the plaintext text box
        var text = document.getElementById("plaintext").value;
        //create histogram values
        var histogram = createHistogramValues(text);

        //show the results to the view
        document.getElementById("chartPlaintext").innerHTML = createHTMLTable(histogram);
    });

    //add event listener to the encrypt button
    document.getElementById("encrypt").addEventListener("click", function (e) {
        e.preventDefault();
        e.stopPropagation();

        //get the value of the plaintext text box
        var plaintext = document.getElementById("plaintext").value;
        //encrypt the text using one time pad function
        var encryptedValues = encryptOneTimePad(plaintext);

        //show the result to the view
        document.getElementById("ciphertext").innerHTML = encryptedValues.ciphertext;
        document.getElementById("keyOneTimePad").innerHTML = encryptedValues.key;
    });

    //add event listener to the analyseciphertext button
    document.getElementById("analyzeCiphertext").addEventListener("click", function (e) {
        e.preventDefault();
        e.stopPropagation();

        //get the value of the ciphertext text box
        var text = document.getElementById("ciphertext").value;
        //create histogram values
        var histogram = createHistogramValues(text);
        //show the result to the view
        document.getElementById("chartCiphertext").innerHTML = createHTMLTable(histogram);
    });

    //add event listener to the decrypt button
    document.getElementById("decrypt").addEventListener("click", function (e) {
        e.preventDefault();
        e.stopPropagation();

        //get the value of the ciphertext text box
        var plaintext = document.getElementById("ciphertext").value;
        //get the value of the decryptkey text box
        var key = document.getElementById("decryptkey").value;

        //show the results to the view
        document.getElementById("ciphertext").innerHTML = decryptOneTimePad(plaintext, key);
    });

    //create histogram values
    function createHistogramValues(text) {
        var histogramPrepare = [];

        for (var i = 0, len = text.length; i< len; i++) {
            var letter = text[i];

            //checks if text is a letter
            if (letter.match(/[a-z]/i))
            {
                histogramPrepare[letter] = (histogramPrepare[letter] || 0) + 1;
            }
        }

        histogram = histogramPrepare.sort(function (a, b) {
            a = a[1];
            b = b[1];

            return a < b ? -1 : (a > b ? 1 : 0);
        });
        return histogram;
    }

    //create html table to show the key and histogram
    function createHTMLTable(histogram)
    {
        var html = "<table>";
        for (var key in histogram) {
            html += "<tr>";
            html += "<td>" + key + ": </td><td>&nbsp;</td>";
            html += "<td>" + histogram[key] + "</td>";
            html += "</tr>";
        }
        html += "</table>";
        return html;
    }

    //encrypts the text usong one time pad functions
    function encryptOneTimePad(input) {
        var key = "";
        for (var k = 0; k < input.length; k++) {
            var c = input[k].charCodeAt(0);

            //uppercase
            if ((c >= 65) && (c <= 90)) {
                key += String.fromCharCode(Math.floor(Math.random() * 26) + 65);
            //lowercase
            } else if ((c >= 97) && (c <= 122)) {
                key += String.fromCharCode(Math.floor(Math.random() * 26) + 97);
            }
        }

        var output = "";
        for (var i = 0; i < input.length; i++) {
            var char = input[i];
            //if character is a letter
            if (char.match(/[a-z]/i)) {
                var c = parseInt(input.charCodeAt(i));
                var keyCharShift = parseInt(key.charCodeAt(i));
                //uppercase
                if ((c >= 65) && (c <= 90)) {
                    output += String.fromCharCode((c - 65 + keyCharShift - 65) % 26 + 65);
                //lowercase
                } else if ((c >= 97) && (c <= 122)) {
                    output += String.fromCharCode((c - 97 + keyCharShift - 97) % 26 + 97);
                }
            }
        }
        return { "ciphertext": output, "key": key };
    }

    //decrypt using one time pad
    function decryptOneTimePad(input, key) {
        var output = "";
        for (var i = 0; i < input.length; i++) {
            var char = input[i];
            //if char is a letter
            if (char.match(/[a-z]/i)) {
                var cr = parseInt(input.charCodeAt(i));
                //uppercase
                if ((cr >= 65) && (cr <= 90)) {
                    var c = parseInt(cr - 65);
                    var keyCharShift = parseInt(key[i].charCodeAt(0) - 65);

                    var newCharPosition = (c - keyCharShift) % 26;
                    if (newCharPosition < 0)
                        newCharPosition += 26;

                    output += String.fromCharCode(newCharPosition + 65);
                //lowercase
                } else if ((cr >= 97) && (cr <= 122)) {
                    var c = parseInt(cr - 97);
                    var keyCharShift = parseInt(key[i].charCodeAt(0) - 97);

                    var newCharPosition = (c - keyCharShift) % 26;
                    if (newCharPosition < 0)
                        newCharPosition += 26;

                    output += String.fromCharCode(newCharPosition + 97);
                }
            }
        }
        return output;
    }
</script>

